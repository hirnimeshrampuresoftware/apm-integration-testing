#!/usr/bin/env groovy
@Library('apm@current') _

import groovy.transform.Field

/**
 This is required to store the build status for the downstream jobs.
*/
@Field def itsDownstreamJobs = [:]

pipeline {
  agent { label 'linux' }
  environment {
    BASE_DIR = 'src/github.com/hirnimeshrampuresoftware/apm-integration-testing'
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
    PIPELINE_LOG_LEVEL='INFO'
    GIT_REFERENCE_REPO = '/var/lib/jenkins/.git-references/apm-integration-testing.git'
    ELASTIC_STACK_VERSION = "${ params?.ELASTIC_STACK_VERSION?.trim() ? params.ELASTIC_STACK_VERSION.trim() : stackVersions.edge() }"
  }
 /**
  triggers {
    cron(env.CHANGE_ID?.trim() ? '' : 'H H(3-4) * * 1-5')
    issueCommentTrigger("(${obltGitHubComments()}|^/testall)")
  }
  */
  options {
    timeout(time: 3, unit: 'HOURS')
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  parameters {
    string(name: 'ELASTIC_STACK_VERSION', defaultValue: "", description: "Elastic Stack Git branch/tag to use")
    string(name: 'BUILD_OPTS', defaultValue: "--apm-log-level=debug", description: "Additional build options to pass to compose.py")
    string(name: 'SLACK_CHANNEL', defaultValue: 'observablt-bots', description: 'The Slack channel where errors will be posted')
    booleanParam(name: 'Run_As_Main_Branch', defaultValue: false, description: 'Allow to run any steps on a PR, some steps normally only run on main branch.')
  }
  stage('Checkout'){
    steps {
      deleteDir()
      gitCheckout(basedir: "${BASE_DIR}",
                  reference: "${GIT_REFERENCE_REPO}")
      stash allowEmpty: true, name: 'source', useDefaultExcludes: false
    }
  }

def runJob(testName, buildOpts = ''){
  def mergeTarget = env.CHANGE_ID?.trim() ? env.CHANGE_TARGET : env.BRANCH_NAME
  def jobName = "apm-integration-test-downstream/${env.BRANCH_NAME}"
  def buildObject = build(job: jobName,
    parameters: [
      string(name: 'INTEGRATION_TEST', value: testName),
      string(name: 'ELASTIC_STACK_VERSION', value: params.ELASTIC_STACK_VERSION),
      string(name: 'INTEGRATION_TESTING_VERSION', value: "${env.GIT_BASE_COMMIT}"),
      string(name: 'MERGE_TARGET', value: "${mergeTarget}"),
      string(name: 'BUILD_OPTS', value: "${params.BUILD_OPTS} ${buildOpts}"),
      string(name: 'UPSTREAM_BUILD', value: currentBuild.fullDisplayName),
      booleanParam(name: 'DISABLE_BUILD_PARALLEL', value: '')
    ],
    propagate: false,
    quietPeriod: 10,
    wait: true)

  itsDownstreamJobs["${testName}"] = buildObject

  catchError(buildResult: 'SUCCESS', message: "Aggregate test results from dowsntream job has failed failed. Let's keep moving.") {
    dir(testName) {
      copyArtifacts(projectName: jobName, selector: specific(buildNumber: buildObject.number.toString()))
      junit(testResults: '**/tests/results/*-junit*.xml', allowEmptyResults: true, keepLongStdio: true)
    }
  }
  if (buildObject.resultIsWorseOrEqualTo('UNSTABLE')) {
    error("Downstream job for '${testName}' failed")
  }
}
